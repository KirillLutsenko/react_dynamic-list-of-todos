{"version":3,"sources":["types.jsx","components/Todo/Todo.jsx","components/TodoList/TodoList.jsx","api/api.jsx","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["todosType","PropTypes","arrayOf","shape","userId","number","id","title","string","completed","bool","todoType","classNames","isRequired","func","require","Todo","todo","onButtonClick","isSelectedUser","className","TodoList__item","key","type","readOnly","button","onClick","TodoList","state","search","filteredTodos","filter","all","active","changeHandler","event","setState","target","name","value","this","props","todos","selectedUserId","visibleTodos","toLowerCase","includes","todoIncludes","placeholder","onChange","map","React","PureComponent","request","url","options","fetch","then","result","ok","Error","status","statusText","json","data","CurrentUser","user","updateUser","newUserId","newUser","catch","email","phone","App","selectUser","clearSelectedUser","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.67d50448.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nconst todosType = PropTypes.arrayOf(PropTypes.shape({\n  userId: PropTypes.number,\n  id: PropTypes.number,\n  title: PropTypes.string,\n  completed: PropTypes.bool,\n}));\n\nconst todoType = PropTypes.shape({\n  userId: PropTypes.number,\n  id: PropTypes.number,\n  title: PropTypes.string,\n  completed: PropTypes.bool,\n});\n\nexport const todoListType = {\n  todos: todosType.isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n  onButtonClick: PropTypes.func.isRequired,\n};\n\nexport const TodoType = {\n  todo: todoType.isRequired,\n  isSelectedUser: PropTypes.bool.isRequired,\n  onButtonClick: PropTypes.func.isRequired,\n};\n\nexport const currentUserType = {\n  userId: PropTypes.number.isRequired,\n  onButtonClick: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { TodoType } from '../../types';\n\nconst classNames = require('classnames');\n\nexport const Todo = ({ todo, onButtonClick, isSelectedUser }) => (\n  <li\n    className={classNames({\n      TodoList__item: true,\n      'TodoList__item--checked': todo.completed,\n      'TodoList__item--unchecked': !todo.completed,\n    })}\n    key={todo.id}\n  >\n    <label>\n      <input type=\"checkbox\" readOnly />\n      <p>{todo.title}</p>\n    </label>\n\n    <button\n      className={classNames({\n        'TodoList__user-button': true,\n        'TodoList__user-button--selected': isSelectedUser,\n        button: true,\n      })}\n      type=\"button\"\n      onClick={() => onButtonClick(todo.userId)}\n    >\n      {`User #${todo.userId}`}\n    </button>\n  </li>\n);\n\nTodo.propTypes = TodoType;\n","import React from 'react';\nimport { todoListType } from '../../types';\nimport { Todo } from '../Todo';\nimport './TodoList.scss';\n\nexport class TodoList extends React.PureComponent {\n  state = {\n    search: '',\n    filteredTodos: 'all',\n  }\n\n  filter = {\n    all: () => true,\n    completed: todo => todo.completed,\n    active: todo => !todo.completed,\n  }\n\n  changeHandler = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value,\n    });\n  }\n\n  render() {\n    const { todos, selectedUserId, onButtonClick } = this.props;\n    const { search, filteredTodos } = this.state;\n    const todoIncludes = todo => todo.title\n      .toLowerCase()\n      .includes(search.toLowerCase());\n\n    const visibleTodos = todos\n      .filter(todo => todo.title\n        && todoIncludes(todo)\n          && this.filter[filteredTodos](todo));\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <input\n          name=\"search\"\n          placeholder=\"Type search task\"\n          className=\"input is-primary\"\n          value={search}\n          onChange={this.changeHandler}\n        />\n\n        <div>\n          <div className=\"select\">\n            <select\n              name=\"filteredTodos\"\n              value={filteredTodos}\n              onChange={this.changeHandler}\n            >\n              <option value=\"all\">All</option>\n              <option value=\"completed\">Completed</option>\n              <option value=\"active\">Active</option>\n            </select>\n          </div>\n          <ul className=\"TodoList__list\">\n            {visibleTodos\n              ? (visibleTodos.map(todo => (\n                <Todo\n                  todo={todo}\n                  onButtonClick={onButtonClick}\n                  isSelectedUser={selectedUserId === todo.userId}\n                  key={todo.id}\n                />\n              )))\n              : <p>No tasks</p>}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = todoListType;\n","export const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const request = (url, options) => fetch(`${BASE_URL}${url}`, options)\n  .then((result) => {\n    if (!result.ok) {\n      throw new Error(`${result.status} - ${result.statusText}`);\n    }\n\n    return result.json();\n  })\n  .then(result => result.data);\n\nexport const getTodos = () => request('/todos');\nexport const getUser = id => request(`/users/${id}`);\n","import React, { PureComponent } from 'react';\nimport './CurrentUser.scss';\n\nimport { getUser } from '../../api/api';\nimport { currentUserType } from '../../types';\n\nexport class CurrentUser extends PureComponent {\n  state = {\n    user: {},\n  }\n\n  componentDidMount() {\n    this.updateUser(this.props.userId);\n  }\n\n  componentDidUpdate() {\n    const { userId } = this.props;\n\n    this.updateUser(userId);\n  }\n\n  updateUser(newUserId) {\n    getUser(newUserId)\n      .then((newUser) => {\n        this.setState({\n          user: newUser,\n        });\n      })\n      .catch(() => {\n        this.setState({\n          user: {},\n        });\n      });\n  }\n\n  render() {\n    const { user } = this.state;\n    const { onButtonClick } = this.props;\n\n    return (\n      <div className=\"CurrentUser\">\n        {user\n          ? (\n            <>\n              <h2 className=\"CurrentUser__title\">\n                <span>\n                  {`Selected user: ${user.id}`}\n                </span>\n              </h2>\n\n              <h3 className=\"CurrentUser__name\">{user.name}</h3>\n              <p className=\"CurrentUser__email\">{user.email}</p>\n              <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n              <button\n                type=\"button\"\n                onClick={() => {\n                  onButtonClick();\n                }}\n                className=\"button clear-button\"\n              >\n                Clear\n              </button>\n            </>\n          )\n          : (\n            <p>User is not found</p>\n          )}\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = currentUserType;\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nimport { getTodos } from './api/api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    getTodos()\n      .then(data => data.filter(({ id, title }) => id && title))\n      .then((todos) => {\n        this.setState({\n          todos,\n        });\n      })\n      .catch(() => {\n        this.setState({\n          todos: null,\n        });\n      });\n  }\n\n  selectUser = (selectedUserId) => {\n    this.setState({\n      selectedUserId,\n    });\n  }\n\n  clearSelectedUser = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectedUserId={selectedUserId}\n            onButtonClick={this.selectUser}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                onButtonClick={this.clearSelectedUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}